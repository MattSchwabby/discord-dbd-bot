Resources:
  userCacheB72D7485:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: UserID
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: UserID
          AttributeType: "N"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: userCache
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: DiscordBotLambdaStack/userCache/Resource
  DockerFunctionServiceRoleEA5D533D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: DiscordBotLambdaStack/DockerFunction/ServiceRole/Resource
  DockerFunctionServiceRoleDefaultPolicy11C9607B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - userCacheB72D7485
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: DockerFunctionServiceRoleDefaultPolicy11C9607B
      Roles:
        - Ref: DockerFunctionServiceRoleEA5D533D
    Metadata:
      aws:cdk:path: DiscordBotLambdaStack/DockerFunction/ServiceRole/DefaultPolicy/Resource
  DockerFunction2D76B2A5:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:34c3b09c39c168f550f9df32c1d4111f0eb9992b6dbac644390f403a7a813c89
      Role:
        Fn::GetAtt:
          - DockerFunctionServiceRoleEA5D533D
          - Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          DISCORD_PUBLIC_KEY: 66fe6b42f70beddbc1bae71610c28904dac8e8d3b5590361365f22b61431558c
          DYNAMODB_TABLE_NAME:
            Ref: userCacheB72D7485
      MemorySize: 1024
      PackageType: Image
      Timeout: 10
    DependsOn:
      - DockerFunctionServiceRoleDefaultPolicy11C9607B
      - DockerFunctionServiceRoleEA5D533D
    Metadata:
      aws:cdk:path: DiscordBotLambdaStack/DockerFunction/Resource
      aws:asset:path: asset.34c3b09c39c168f550f9df32c1d4111f0eb9992b6dbac644390f403a7a813c89
      aws:asset:dockerfile-path: Dockerfile
      aws:asset:property: Code.ImageUri
  DockerFunctionFunctionUrl0F5531A4:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn:
        Fn::GetAtt:
          - DockerFunction2D76B2A5
          - Arn
      Cors:
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
        AllowOrigins:
          - "*"
    Metadata:
      aws:cdk:path: DiscordBotLambdaStack/DockerFunction/FunctionUrl/Resource
  DockerFunctioninvokefunctionurlCDFE822B:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName:
        Fn::GetAtt:
          - DockerFunction2D76B2A5
          - Arn
      Principal: "*"
      FunctionUrlAuthType: NONE
    Metadata:
      aws:cdk:path: DiscordBotLambdaStack/DockerFunction/invoke-function-url
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/02Qy07DMBBFv4W9M1AWFSyhCIkVVYB1NbGHaBo/Ko8NiqL8O7ZLEat7dOdqXrewvYebK/yWTpupszzA8pZQT6pYh8XMHl0wxXzHwZLaffoGq7LoBoOwPAU9UXxxONJz9jpx8DX1xxf4iLb6v7Kn6Fik+KtidLD04dy96T5Y1nPLNVoV6XhAEUoC/wY+VKfWoKdTEE4hzo8oZbueJOSoSbVIOWhkP9aGrzmdcmqTLpHCu+ANp7aND4bgKNdfmzvYbMtrjsLcxewTO4L+rD+V21+lNgEAAA==
    Metadata:
      aws:cdk:path: DiscordBotLambdaStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  FunctionUrl:
    Value:
      Fn::GetAtt:
        - DockerFunctionFunctionUrl0F5531A4
        - FunctionUrl
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

